// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String
  name         String
  role         String      @default("OWNER")
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("users")
}

model Restaurant {
  id         String     @id @default(cuid())
  name       String
  slug       String     @unique
  phone      String?
  logo       String?
  ownerId    String
  users      User[]
  categories Category[]
  tables     Table[]
  orders     Order[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("restaurants")
}

model Category {
  id           String     @id @default(cuid())
  name         String
  order        Int        @default(0)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  isAvailable Boolean     @default(true)
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("products")
}

model Table {
  id           String     @id @default(cuid())
  number       String
  qrCode       String     @unique
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders       Order[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("tables")
}

model Order {
  id           String      @id @default(cuid())
  tableId      String
  restaurantId String
  status       String      @default("PENDING")
  total        Float
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  table        Table       @relation(fields: [tableId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

// SQLite doesn't support enums, using String instead
// Role: OWNER, STAFF
// OrderStatus: PENDING, PREPARING, READY, DELIVERED, CANCELLED